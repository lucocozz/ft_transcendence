// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgres://user:1234@localhost:5432/transcendence?schema=public"
}

model User {
  id            Int         @id @default(autoincrement())
  email         String?     @unique
  nickname      String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  token         String      @unique
  refreshToken  String      @unique
  avatar        String?
  status        logStatus   @default(offline)
  twoFA         Boolean     @default(false)
  gameProfileID Int         @unique
  gameProfile   GameProfile @relation(fields: [gameProfileID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialID      Int         @unique
  social        Social      @relation(fields: [socialID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialFriends Social[]    @relation("friends")
  socialBlocked Social[]    @relation("blocked")
  partyPO       Party?      @relation("playerOne")
  partyPT       Party?      @relation("playerTwo")
  partyWinner   Party?      @relation("winner")
  notifyUserID  Notify?
  ChannelUsers  Channel[]   @relation("chanUsers")
  channelOwner  Channel[]   @relation("owner")
  channelAdmins Channel[]   @relation("admins")
  channelMuted  Channel[]   @relation("mutedUsers")
  messageUser   Message[]
  matchsUsers   Matchs[]
}

model GameProfile {
  id        Int    @id @default(autoincrement())
  level     Float  @default(0)
  xp        Float  @default(0)
  nbParty   Int    @default(0)
  nbWin     Int    @default(0)
  historyID Int?
  history   Party? @relation(fields: [historyID], references: [id])
  userGame  User?
}

model Social {
  id         Int      @id @default(autoincrement())
  channelsID Int?
  channels   Channel? @relation(fields: [channelsID], references: [id])
  friendsID  Int?
  friends    User?    @relation(name: "friends", fields: [friendsID], references: [id])
  blockedID  Int?
  blocked    User?    @relation(name: "blocked", fields: [blockedID], references: [id])
  notifysID  Int?
  notifys    Notify?  @relation(fields: [notifysID], references: [id])
  userSocial User?
}

model Party {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  playerOneID Int           @unique
  playerOne   User          @relation(name: "playerOne", fields: [playerOneID], references: [id])
  playerTwoID Int?          @unique
  playerTwo   User?         @relation(name: "playerTwo", fields: [playerTwoID], references: [id])
  winnerID    Int?          @unique
  winner      User?         @relation(name: "winner", fields: [winnerID], references: [id])
  status      partyStatus   @default(starting)
  gameHistory GameProfile[]
  notifyParty Notify?
  matchsParty Matchs[]
}

model Channel {
  id             Int         @id @default(autoincrement())
  type           channelType @default(private)
  usersID        Int         @unique
  users          User        @relation(name: "chanUsers", fields: [usersID], references: [id])
  ownerID        Int         @unique
  owner          User        @relation(name: "owner", fields: [ownerID], references: [id])
  adminsID       Int         @unique
  admins         User        @relation(name: "admins", fields: [adminsID], references: [id])
  mutedUsersID   Int?        @unique
  mutedUsers     User?       @relation(name: "mutedUsers", fields: [mutedUsersID], references: [id])
  messagesID     Int?        @unique
  messages       Message?    @relation(fields: [messagesID], references: [id])
  password       String?
  socialChannels Social[]
  notifyChannel  Notify?
}

model Notify {
  id           Int        @id @default(autoincrement())
  title        String
  content      String
  type         notifyType
  createdAt    DateTime   @default(now())
  userID       Int?       @unique
  userIDRef    User?      @relation(fields: [userID], references: [id])
  channelID    Int?       @unique
  channelIDRef Channel?   @relation(fields: [channelID], references: [id])
  partyID      Int?       @unique
  partyIDRef   Party?     @relation(fields: [partyID], references: [id])
  social       Social[]
}

model Message {
  id             Int       @id @default(autoincrement())
  userID         Int       @unique
  user           User      @relation(fields: [userID], references: [id])
  content        String
  createdAt      DateTime  @default(now())
  channelMessage Channel[]
}

model Matchs {
  id      Int    @id @default(autoincrement())
  usersID Int?   @unique
  users   User?  @relation(fields: [usersID], references: [id])
  partyID Int?   @unique
  party   Party? @relation(fields: [partyID], references: [id])
}

enum logStatus {
  online
  offline
  doNotDistrub
  AFK
  invisible
  inGame
}

enum partyStatus {
  starting
  running
  finish
}

enum channelType {
  private
  protected
  public
}

enum notifyType {
  newMessage
  playRequest
  friendRequest
}
