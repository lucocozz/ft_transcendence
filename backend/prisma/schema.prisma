// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgres://user:1234@localhost:5432/transcendence?schema=public"
}

model User {
  id             Int             @id @default(autoincrement())
  Email          String?         @unique
  Nickname       String?         @unique
  CreatedAt      DateTime        @default(now())
  UpdatedAt      DateTime        @updatedAt
  Token          String          @unique
  RefreshToken   String          @unique
  Avatar         String?
  Status         logStatus       @default(offline)
  TwoFA          Boolean         @default(false)
  GameProfile    GameProfile?
  SocialProfile  SocialProfile?
  Friend         SocialProfile[] @relation("friends")
  BlockedID      Int?
  Blocked        SocialProfile?  @relation(name: "blocked", fields: [BlockedID], references: [id])
  PlayerOneID    Int?            @unique
  PlayerOne      Party?          @relation(name: "playerOne", fields: [PlayerOneID], references: [id])
  PlayerTwoID    Int?            @unique
  PlayerTwo      Party?          @relation(name: "playerTwo", fields: [PlayerTwoID], references: [id])
  WinnerID       Int?            @unique
  Winner         Party?          @relation(name: "winner", fields: [WinnerID], references: [id])
  ChannelUserID  Int?            @unique
  ChannelUser    Channel?        @relation(name: "chanUsers", fields: [ChannelUserID], references: [id])
  ChannelOwnerID Int?            @unique
  ChannelOwner   Channel?        @relation(name: "owner", fields: [ChannelOwnerID], references: [id])
  ChannelAdminID Int?            @unique
  ChannelAdmin   Channel?        @relation(name: "admin", fields: [ChannelAdminID], references: [id])
  MutedUserID    Int?            @unique
  MutedUser      Channel?        @relation(name: "mutedUser", fields: [MutedUserID], references: [id])
  UserNotifyID   Int?            @unique
  UserNotify     Notify?         @relation(fields: [UserNotifyID], references: [id])
  UserMessageID  Int?            @unique
  UserMessage    Message?        @relation(fields: [UserMessageID], references: [id])
}

model GameProfile {
  id      Int     @id @default(autoincrement())
  Level   Float   @default(0)
  Xp      Float   @default(0)
  NbParty Int     @default(0)
  NbWin   Int     @default(0)
  History Party[]
  UserId  Int?    @unique
  User    User?   @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

model Party {
  id            Int          @id @default(autoincrement())
  CreatedAt     DateTime     @default(now())
  UpdatedAt     DateTime     @updatedAt
  PlayerOne     User?        @relation("playerOne")
  PlayerTwo     User?        @relation("playerTwo")
  Winner        User?        @relation("winner")
  Status        partyStatus  @default(starting)
  GameHistoryID Int?
  GameHistory   GameProfile? @relation(fields: [GameHistoryID], references: [id])
  PartyNotifyID Int?         @unique
  PartyNotify   Notify?      @relation(fields: [PartyNotifyID], references: [id])
}

model SocialProfile {
  id       Int       @id @default(autoincrement())
  Channels Channel[]
  Friends  User[]    @relation("friends")
  Blocked  User[]    @relation("blocked")
  Notifys  Notify[]
  UserId   Int?      @unique
  User     User?     @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

model Notify {
  id             Int            @id @default(autoincrement())
  CreatedAt      DateTime       @default(now())
  Type           notifyType
  Title          String
  Content        String
  User           User?
  Channel        Channel?
  Party          Party?
  SocialNotifyID Int?
  SocialNotify   SocialProfile? @relation(fields: [SocialNotifyID], references: [id])
}

model Channel {
  id              Int            @id @default(autoincrement())
  CreatedAt       DateTime       @default(now())
  UpdatedAt       DateTime       @updatedAt
  Type            channelType    @default(private)
  Name            String?        @unique
  Description     String?
  Owner           User?          @relation("owner")
  Users           User[]         @relation("chanUsers")
  Admins          User[]         @relation("admin")
  MutedUsers      User[]         @relation("mutedUser")
  Messages        Message[]
  Password        String?
  SocialChannelID Int?
  SocialChannel   SocialProfile? @relation(fields: [SocialChannelID], references: [id])
  userId          Int
  ChannelNotifyID Int?           @unique
  ChannelNotify   Notify?        @relation(fields: [ChannelNotifyID], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  Content   String
  User      User?
  ChannelId Int      @unique
  Channel   Channel  @relation(fields: [ChannelId], references: [id])
}

enum logStatus {
  online
  offline
  doNotDistrub
  AFK
  invisible
  inGame
}

enum partyStatus {
  starting
  running
  finish
}

enum channelType {
  private
  protected
  public
}

enum notifyType {
  newMessage
  playRequest
  friendRequest
}
